Este documento contiene algunas anotaciones importantes sobre el Curso de Laravel desde Cero.
Versión Laravel 5.5 (LTS)
URL curso: https://styde.net/laravel-5/


*------------------------------------------------------------------------------------------*
Tema 1: Instalación de Composer y Laravel


*------------------------------------------------------------------------------------------*
Tema 2: Introducción a Laravel

Laravel utiliza el patrón MVC, pero es mucho más que eso.

Otro de los patrones de diseño importante que utiliza es el: Front Controller. Este consiste 
en que exista un solo punto de entrada en nuestra aplicación, es decir, todas las peticiones
pasan por el árchivo public/index.php. Si se llegase a colocar al principio de index.php:

    die($_SERVER['REQUEST_URI']);

Esto detendría la aplicación e imprimiría la página que solicita el usuario.

*------------------------------------------------------------------------------------------*
Tema 3: Rutas

Laravel posee 4 tipos de rutas, todas estas se encuentran en la carpeta routes.

Anotaciones de routes/web.php

Ruta: /usuarios/detalles     (Esta ruta no se lista en el curso)
    Esta ruta no indica el usuario al que se le quiere mostrar los detalles, para ello se debe 
    debe utilizar la variable globar GET o POST.

Ruta: /usuarios/{id}
    Esta ruta es una modificación de la anterior, pero se utiliza un parámetro dinámico dentro de la ruta.
    Los parámetros dinámicos se escriben entre llaves.
    Otra forma de escribir el return, podría ser:
        return Mostrando detalle del usuario: ' . $id; 
    Es más fácil imprimirlo de la forma: 
        return "Mostrando detalle del usuario: $id"; 
    pero se debe usar comillas dobles
    Aunque también para mejorar la legibilidad del código se puede hacer:
        return "Mostrando detalle del usuario: {$id}";
    Pero esto depende del IDE o editor de texto que se use.
    En este ejericio se utiliza el filtro:
        where('id', '[0-9]+'); 
    Éste valida que el parámetro dinámico (No el argumento de la función) id sea un entero, 
    se hace a través de una expresión regular. Una manera más fácil de escribir la expresión regular
    para los dígitos es:
        \d+
    y para cadenas de caracteres:
         \w+

Ruta: /usuarios/nuevo

    Laravel compara las rutas en orden, por ende esta ruta nunca entraría aquí sino en la de arriba 'usuarios/{id}'
    Ahora funciona porque la de arriba se colocó la restricción que el parámetro dinámico sea un entero.
    Una forma fácil de solucionar sería simplemente mover este bloque de código antes que la ruta de arriba
 

Ruta: /saludo/{name}/{nickname?}

    Laravel soporte más de un parámetro dinámico a la vez.
    En este ejemplo, el parámetro nickname es opcional, por eso se coloca ?
    Y por ende en el argumento de la función anónima se le da un valor por defecto, en este caso null.
    Algo muy importante es que el nombre del parámetro dinámico no es obligado que coincida con el nombre puesto
    en el argumento, es decir, el parámetro puede ser {name} y en el argumento $nombre lo que realmente importa es el orden.
 

*------------------------------------------------------------------------------------------*
Tema 4: Pruebas

Las pruebas se ubican en la carpeta tests de la aplicación web.

Indicaciones para usar los Tests

    1. Existen 2 sub-carpetas para las pruebas: Feature y Unit
        Feature: En esta carpeta se colocan todas las pruebas que emulan una petición http al servidor.
        Unit: Aquí se colocan las pruebas que se encargan de probar partes 
                individuales de la aplicación (Clases y Métodos). Sin simular peticiones http

    2. Para ejecutar las pruebas basta escribir: vendor/bin/phpunit
        Aunque para los sistemas Windows sería: vendor\bin\phpunit

    3. En esta unidad se hace uso de alias en la cónsola. Los alias son abreviaturas de código.

        Para crear un alias es: alias nombre_alias=Función_alias

        En este caso se creó un alias para ejecutar las pruebas y fue:

        alias tests=vendor\bin\phpunit

        si se quiere eliminar un alias es: unalias nombre_alias

    4. Una vez que se pone en marcha la ejecución de los tests, PHPUnit recorre todas las clases dentro de 
        la carpeta tests que tengan el sufijo Test y va a ejecutar las pruebas dentro de cada uno de estos
        métodos (Ver punto 7).

    5. Para crear una nueva prueba de forma rápida con artisan es: 
                php artisan make:test NombrePruebaTest
        crearía la clase del test dentro de la carpeta Feature

    6. Una vez creado la nueva prueba es recomendable cambiarle el nombre del método a algo más descriptivo
        ya que de esta manera es más fácil ubicar el método que falla y mejora la documentación.

    7. En el punto 4, se había indicado que para crear una prueba la clase debía tener el Sufijo 'Test'.
        Pero para que realmente se ejecute la prueba que se encuentra dentro del método es necesario que el 
        nombre del método tenga como prefijo  'test'.

        Nombre de función original Original (empieza con test): 

            public function testExample()

        Cambio de nombre descriptivo:

            public function test_it_loads_the_users_list_page()

        Un detalle importante es que podemos quitar el prefijo test (Para mejorar la legibilidad), 
        pero se debe agregar como una anotación. 
        Recordando, una anotación es una forma de añadir metadatos al código fuente, en este caso al
        método.

        Quedaría:

            /** @test */
             public function it_loads_the_users_list_page()

        Incluso para volverla más legible se podría quitar la palabra reservada 'public' que es opcional

        Quedando:
            /** @test */
            public function it_loads_the_users_list_page()
            

    8. El código fuente del ejercicio se encuentra intra-documentado en los comentarios.

    9. Suponiendo que un Test falle, solo basta con escribir en el método del Test que ha fallador la sentencia:

        $this->withoutExceptionHandling();

    esto imprimirá por cónsola el error que se guarda en el log.    

En este tema no se tocaron las pruebas unitarias.

*------------------------------------------------------------------------------------------*
Tema 4: Controladores


Artisan nos permite crear un cotrolador en la ruta app/Http/Controllers de una manera automática
esto se realiza con el comando:

    php artisan make:controller NombreControlador

El controlador que se crea es una clase de PHP.

Para cada lógica asociada a una ruta se debe crear un método y en la ruta se debe indicar la clase
del controlador y el método. Ejemplo:

Route::get('/usuarios/nuevo', 'UserController@create');

    Observación: 

    1. La convención que utiliza Laravel para dar nombre a los nombres de espacio (namespace) es el PSR-4

    2. Los nombres de espacio son como los apellidos de una clase, pueden existir dos clases con el mismo nombre
    pero la diferencia radicaría en los nombres de espacio.

    3. En Laravel generalmente los nombres de espacios van a emular la estructura de directorios. Ejemplo:
            namespace App\Http\Controllers;

    4. En la sección autoload (autocarga) de composer.json (Se encuentra en el directorio raíz) se mapea todas las 
    clases que comienzan con el nombre de espacio App a la carpeta app.

        "psr-4": {
            "App\\": "app/"
        }

    5. En la sección autoload para el entorno de desarrollo se mapea todas las clases que comienzan con el nombre
    de espacio Tests a la carpeta tests

        "psr-4": {
            "Tests\\": "tests/"
        }

    6. Suponiendo que un Test falle, solo basta con escribir en el método del Test que ha fallador la sentencia:

        $this->withoutExceptionHandling();

    esto imprimirá por cónsola el error que se guarda en el log.

    7. Si el controlador solo tendrá un solo un método público que representa una acción entonces dicho método
    se puede representar como un método mágico del tipo invoke (__invoke). Esto lo que hace es que en la ruta
    se llama al controlador que es un objeto como una función

    La ruta quedaría:

        Route::get('/saludo/{name}/{nickname?}', 'WelcomeUserController');

    en vez de:

        Route::get('/saludo/{name}/{nickname?}', 'WelcomeUserController@index');

    Y el método en el controlador quedaría:

            public function __invoke($name, $nickname = null)

    en vez de 

        public function index($name, $nickname = null)


*------------------------------------------------------------------------------------------*
Tema 5: Vistas

- La vista se deben crear en el directorio: resources/views y debe ser un archivo
.php o .blade.php

- Para retornar una vista se debe usar el helper view, por ejemplo:

    return view('users');

- Una forma de pasar a la vista datos, es a través del segundo argumento del helper view,
se pasa un arreglo asociativo donde la clave es la variable que se quiere pasar y el valor
son los datos, ejemplo:

    return view('users', [
        'users' => ['nombre 1', 'nombre 2']
    ]);

El código para utilizarlo en la vista es tal cual como se si hubiese declarado la variable
en dicha vista.

- Se puede enviar más de una variable

    return view('users', [
        'users' => ['nombre 1', 'nombre 2'],
        'title' => 'Título página'
    ]);

- Otra forma de pasar variables a la vista es encadenando el método with, ejemplo:

    return view('users')->with([
        'users' => ['nombre 1', 'nombre 2'],
        'title' => 'Título página'
    ]);

- Otra forma de pasar variables es encadenar un método with por cada variable:

    return view('users')
        ->with('users', ['nombre 1', 'nombre 2'])
        ->with('title', 'Título página');

- Otra forma de pasar variables es concatenando el nombre de la variable al método
with y como argumento los datos, ejemplo

    
    return view('users')
        ->withUsers(['nombre 1', 'nombre 2'])
        ->withTitle('Título página');

- Otra forma de pasar variables es utilizar la función de PHP compact que acepta como argumento
el  nombre de las variables y las va a convertir en un array asociativo

    $users = ['nombre 1', 'nombre 2'];
    $title = 'Título página';
    return view('users', compact('users', 'title'));

Esta forma generalmente se usa cuando la variable(s) local al método del controlador será igual
a la usada en la vista.






*------------------------------------------------------------------------------------------*

TIPS DE DESARROLLO EN PHP:

1. Forma alternativa de foreach:

    Original:
        foreach($users as $user)
        {
            echo e($user);
        }

    Alternativa:
        foreach($users as $user):
            echo e($user);
        endforeach;

2. Sintaxis más corta para imprimir variables con PHP

    Original:
        <?php echo $var ?>

    Alternativa (Corta):
        <?= $var ?>

*------------------------------------------------------------------------------------------*

TIPS DE DESARROLLO EN LARAVEL:

1. El helper dd(código) es equivalente a usar var_dump(código) y luego die()


*------------------------------------------------------------------------------------------*

TIPS DE SEGURIDAD:

    1. Escapar código html/JavaScript

        Supongamos que tenemos una lista de usuarios que queremos mostrar en la lista, pero 
        dicho usuario usó como nombre código JavaScript, si se pasa esa lista a la vista dicho
        código se ejecutará, ejemplo:

            Código en el controlador:
                return view('users', {
                    'users' => ['nombre 1', '<script>alert("clic")</script>']
                });    
            Código en la vista:
                <?php foreach($users as $user): ?>
                    <li><?php echo $user; ?></li>
                <?php endforeach; ?>

        Esto ejecutará el código JavaScript, a pesar que es un código molesto (Solo en este ejemplo)
        traería consecuencias graves, ya que pueden implementar código malintencionado.

        Una manera de solventarlo es usar el helper e de Laravel (https://laravel.com/docs/5.7/helpers#method-e)
        que escapará los caracteres especiales y por ende no se ejecutará porque lo muestra como texto plano, 
            
            Se debe cambiar el código en la vista a:

                <?php foreach($users as $user): ?>
                    <li><?php echo e($user); ?></li>
                <?php endforeach; ?>

        El tipo de ataque que previene el helper e es XSS.







